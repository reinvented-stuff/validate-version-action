---
# yamllint disable rule:line-length

name: Validate planned version
description: Makes sure version tag can be created


inputs:
  github_token:
    description: 'Pass the secrets.GITHUB_TOKEN variable'
    type: string
    required: true

  version_filename:
    description: 'Path to the file with application version'
    type: string
    default: '.version'

  fail_on_error:
    description: 'Fail the pipeline on error'
    type: boolean
    default: false


outputs:
  planned_version:
    description: "Version that is planned to be released"
    value: ${{ steps.planned_version.outputs.planned_version }}

  version_file_exists:
    description: "True if the version file exists"
    value: ${{ steps.version_file_exists.outputs.version_file_exists }}

  tag_hash:
    description: "Commit hash if version tag exists"
    value: ${{ steps.lookup_tag.outputs.tag_hash }}

  can_create:
    description: "True if version tag can be created"
    value: ${{ steps.can_create.outputs.can_create }}

  tag_exists:
    description: "True if version tag already exists"
    value: ${{ steps.can_create.outputs.tag_exists }}

  branch_name:
    description: "Working branch name"
    value: ${{ steps.get_branch_name.outputs.branch_name }}


runs:
  using: "composite"
  steps:


    - name: Get trigger branch name
      id: get_branch_name
      shell: bash
      run: |
        echo "::set-output name=branch_name::${GITHUB_REF#refs/heads/}"


    - name: Check if version file exists
      id: version_file_exists
      shell: bash
      run: |
        if [[ -f "${{inputs.version_filename}}" ]]; then
          echo "::set-output name=version_file_exists::true"
        else
          echo "::set-output name=version_file_exists::false"
        fi


    - name: Fail if version file doesn't exist
      if: >-
        inputs.fail_on_error == true &&
        steps.version_file_exists.outputs.version_file_exists == false
      id: fail_version_file_exists
      shell: bash
      run: |
        echo "Version file doesn't exist: '${{inputs.version_filename}}'"
        exit 2


    - name: Read out version file
      id: planned_version
      shell: bash
      run: echo "::set-output name=planned_version::$(cat "${{inputs.version_filename}}")"


    - name: Fail if version file content is empty
      if: inputs.fail_on_error == true
      id: fail_planned_version
      shell: bash
      run: |
        if [[ -z "${{ steps.planned_version.outputs.planned_version }}" ]]; then
          echo "Version file '${{inputs.version_filename}}' empty!"
          exit 3
        fi


    - name: Lookup planned tag
      id: lookup_tag
      shell: bash
      run: |
        URL="https://api.github.com/repos/${{ github.repository }}/git/refs/tags/${{ steps.planned_version.outputs.planned_version }}"
        TAG_HASH=$( curl -s -X GET -H 'authorization: Bearer ${{ inputs.github_token }}' --url "${URL}" | jq .object.sha )
        echo "::set-output name=tag_hash::${TAG_HASH}"


    - name: Define if can create a new version
      if: steps.lookup_tag.outputs.tag_hash == 'null'
      id: can_create
      shell: bash
      run: |
        echo "::set-output name=tag_exists::false"
        echo "::set-output name=can_create::true"


    - name: Display all outputs
      id: display_planned_version
      shell: bash
      run: |
        echo "::debug::planned_version: ${{ steps.planned_version.outputs.planned_version }}"
        echo "::debug::version_file_exists: ${{ steps.version_file_exists.outputs.version_file_exists }}"
        echo "::debug::tag_hash: ${{ steps.lookup_tag.outputs.tag_hash }}"
        echo "::debug::can_create: ${{ steps.can_create.outputs.can_create }}"
        echo "::debug::tag_exists: ${{ steps.can_create.outputs.tag_exists }}"
        echo "::debug::branch_name: ${{ steps.get_branch_name.outputs.branch_name }}"


    - name: Fail if version file content is empty
      if: inputs.fail_on_error == true
      id: fail_can_create
      shell: bash
      run: |
        echo "Can't create version tag '${{ steps.planned_version.outputs.planned_version }}'"
        echo "Version tag already exists: '${{ steps.can_create.outputs.tag_exists }}'"
        exit 4

...
